#!/bin/sh

# DESCRIPTION
#   This script migrates from "apt-key" managed keys to "[signed-by=/usr/share/keyrings/...]":
#    - loop through all lists in /etc/apt/sources.list.d
#      - read all lines with "deb..." that do not contain "[signed-by=]"
#      - download the GPG signature from the URL
#        - read the key ID from the signature
#        - download and save the key using gpg
#      - add "[signed-by=/usr/share/keyrings/...]" to the "deb..." line
#    - make a backup of the old .list file as .list.apt-key.bak
#  After the migration you have to delete (or rename to be safe) /etc/apt/trusted.gpg.d and
#  /etc/apt/trusted.gpg
#
# REQUIREMENTS
#   perl, curl, gpg
#
# CAVEATS
#   This does not work e.g. for Anydesk as the Ubuntu keyserver returns an expired key.
#   But you can manually download the ASCII armored key and then run migrate-apt-keys.sh:
#     curl https://keys.anydesk.com/repos/DEB-GPG-KEY | gpg --dearmor >/usr/share/keyrings/anydesk-stable-archive-keyring.gpg
#   See: https://lists.ubuntu.com/archives/ubuntu-users/2022-January/306500.html

set -ue

workdir=$(mktemp)

for repo in /etc/apt/sources.list.d/*.list; do
  sig_base=${repo%.list}; sig_base=${sig_base##*/}
  sig_file=/usr/share/keyrings/${sig_base}-archive-keyring.gpg
  skip_repo=false
  new_repo=$workdir/new_repo.list; : >"$new_repo"

  migrated=false
  while read -r line; do

    case "$line" in
      (deb-src*|deb*) ;;
      (*) echo "$line" >>"$new_repo"; continue ;  # unmodified if no repo definition
    esac
    # skip if already "signed-by"
    case "$line" in
      (*'['*signed-by*']'*) echo "$line" >>"$new_repo"; continue ;;
    esac

    echo "$sig_base: += $line"

    if [ -f "$sig_file" ]; then
      echo "$sig_base: key already exists - skipping download"
    else
      # assemble URL
      url=$(echo "$line" | perl -pe 's{^ (?:(?:deb|deb-src) \s+) (?: \[[^\]]+] \s+)? (\S+?)/? \s+ (\S+) \s+ .* }{ $suite=$2; "$1/".($suite=~m|/$|?$suite:"dists/$2/") }xe')
      echo "$sig_base: downloading $url"

      # download signature
      if ! sigfile=$(curl -s -f -L "${url}InRelease"); then
        if ! sigfile=$(curl -s -f -L "${url}Release.gpg"); then
          echo "$sig_base: URL ${url}[InRelease|Release.gpg] not found"; exit 1
        fi
      fi

      # read key ID from signature
      keyid=$(echo "$sigfile" | gpg --verify -vv 2>&1 | tr '\n' ' ' | sed -E 's/.*signature.*keyid ([0-9A-Z]+).*/\1/i')
      if [ -z "$keyid" ]; then echo "$sig_base: Could not find key id in signature"; exit 1; fi
      echo "$sig_base: key id = $keyid"

      # download key
      temp_sig=$workdir/temp_sig
      gpg --quiet --no-default-keyring --keyring "$temp_sig" --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys "$keyid"
      expiry=$(gpg --no-default-keyring --keyring="$temp_sig" --list-keys --with-colons --fixed-list-mode | grep pub | cut -d: -f7)
      if [ ! -z "$expiry" ] && [ $expiry -lt $(date '+%s') ]; then
        expiry_date=$(date -d "1970-01-01 UTC $expiry seconds" +"%Y-%m-%d %T %z")
        echo "$sig_base: SKIPPING migration - key expired on $expiry_date"
        skip_repo=true; break
      fi
      mv "$temp_sig" "$sig_file"
      chmod 0644 "$sig_file"
    fi

    echo "$line" \
     | SIG=$sig_file perl -pe 's{^ ((?:deb|deb-src) \s+) (?: \[ ([^\]]+) ] \s+ )? (.*) }{$1\[$2 signed-by=$ENV{SIG}\] $3}x' \
     >>"$new_repo"

    migrated=true
  done <"$repo"

  if "$migrated" && ! "$skip_repo"; then
    cp "$repo" "$repo.apt-key.bak"
    # preserve permissions
    cat "$new_repo" >"$repo"
    echo "$sig_base: migration done"
  fi
done

rm -rf "$workdir"
